
깃에서 버전이란
    문서를 수정하고 저장할 때마다 생기는 것
    파일 이름을 유지하면서 만든 시간과 수정 내용 기록

스테이지와 커밋
    1. 작업트리(working directory) : 예) hello-git
    2. 스테이지(stage) : 버전으로 만들 파일이 대기하는 곳
        버전으로 만들 파일을 staging area에 넘겨줌
    3. 저장소(repository) : 스테이지에서 대기하고 있던 파일들을
                            버전으로 만들어 저장하는 곳
    
    작업트리 --(add)--> 스테이지 ----커밋(commit)-----> 저장소
           (문서수정파일)

작업트리에서 vi 문서 편집(파일 생성 및 수정)
    1. hell-git 디렉터리 이동 : 깃 초기화에 따라 버전관리 상태
       $ git status
    2. vi hello.txt
        '1'입력 'wq'
        cat hello.txt 확인
    3. ls -al 
    4. git status    
        Untracked files: 아직 한번도 버전 관리하지 않은 파일

수정한 파일을 스테이징하기(git add) 
    스테이지에 수정한 파일을 추가(staging)
    1. git add hello.txt
    2. git status
    3. Untracked files: -> Changes to be committed: 로 바뀜
        'new file:'수식어 추가 표시
        수정한 파일 hello.txt가 스테이지에 추가
    
스테이지에 올라온 파일 커밋하기(git commit)
    파일이 스테이지에 있다면 이제 버전을 만들 수 있다.
    버전을 만드는 것을 '커밋한다' 커밋 시 어떤 변경 사항이 있었는지
    확인하기 위해 메시지를 함께 기록
    1. git commit -m "message1"
    2. git status
        nothing to commit, working tree clean
    3. 버전이 제대로 만들어졌는지 확인
       git log
    4. 커밋 만든 사람, 시간, 메시지 정보 표시

스테이징과 커밋 한꺼번에 처리하기(git commit -am)
    commit 명령에 -am 옵션을 사용
    스테이지에 올리고 커밋하는 과정을 한꺼번에 처리하기
    단, 한 번이라도 커밋한 적이 있는 파일을 재커밋할 때만 사용
    1. hello.txt 수정(숫자 '2' 추가)
    2. git status
        Changes not staged for commit:
            modified:   hello.txt
    2. git commit -am "message2"
    3. git log

        

