05-3 협업의 기본 알아보기
깃허브의 원격 저장소를 사용해 협업할 때 가장 기본으로 사용되는 방법을 알아보자
하나의 작업을 사용자가 협업하기 위해서는 각자 지역 저장소에서 작업한 내용을
자유롭게 원격 저장소에서 공유할 수 있어야 한다.
여기서 사용자가 총 세명이라고 가정해보자.

[1] 공동 작업자 추가하기
    깃허브 공개 저장소는 주소만 알면 누구든지 접속해서 올라와 있는 소스를 살펴
    볼 수 있다. 또 깃허브 회원이라면 누구나 오픈 소스 프로젝트의 소스를 내려받을
    수도 있다. 하지만 누구나 저장소에 커밋을 푸시할 수는 없다. 공개 저장소든 
    비공개 저장소든 여러 사람이 협업한다면 승인된 공동 작업자에게만 커밋을 올릴
    수 있는 권한을 주어야 한다. 그래야 프로젝트 소스가 무분별하게 수정되는 일을
    막을 수 있기 때문이다.
    여기에서는 '팀장'과 '팀원1', '팀원2' 이렇게 세 사람이 깃허브를 통해 협업한
    다고 생각해보자. 팀 작업을 하려면 팀원 중 누군가 원격 저장소를 만들고 나머지
    팀원들은 공동 작업자로 추가해야 한다. 여기에서는 팀장이 manuals라는 저장소를
    만들었다고 가정해 보자. 
    팀장은 manuals 저장소 화면에서 
   
    1. Repository에서 [Settings] 메뉴 선택,
    2. 왼쪽 옵션에서 [Manage Access] 선택,
        'Manage access' 에서 
    3. [Add people] 버튼 클릭
        초대할 ID 검색 및 email 등록
    4. 각 팀원은 초대 메일 확인

[2] 작업 환경 구성하기
    원격 저장소에 공동 작업자가 추가 되었다면 팀장과 팀원들이 번갈아 커밋을 올리
    거나 내려받으면서 작업할 수 있다. 이 작업은 둘 이상의 컴퓨터에서 하나의 깃허브에
    접속하는 것이기 때문에 이후의 실습은 두 대의 서로 다른 컴퓨터에서 진행해야 한다.

    먼저 각 작업자의 컴퓨터에 지역 저장소를 만들어야 한다. 그리고 공동 작업에서
    사용할 이름과 이메일 주소를 지정한다.
    저장소마다 다른 이름이나 이메일 주소를 사용하기 위해 
    git config 명령을 사용할 때 --global 옵션을 빼고 이름과 메일 주소를 지정
    $ git init manuals
    $ cd manuals
    $ git config user.name '사용자 이름'
    $ git config user.email '메일 주소'
    $ git config -l

    팀장뿐만 아니라 공동 작업자 모두 같은 방식으로 지역 저장소와 기본 사용자 환경을
    지정한다.

[3] 원격 저장소에 첫 커밋 푸시하기
    우선 팀장이 overview.txt 라는 문서를 만들고 커밋한 후 원격 저장소의 master 브랜치
    로 푸시하는 과정을 살펴보자. 원격 저장소에 처음 올라가는 커밋이라면 앞에서 공부한
    것처럼 간단히 올릴 수 있다.

    1. vi overview.txt
       git add overview.txt
       git commit -m 'overview'
       git log

    2. git remote add origin 복사한 저장소 주소
       git push -u origin master
       git log 

        지역 저장소의 커밋을 원격 저장소에 푸시하려면 먼저 원격 저장소 주소를 복사
        그리고 터미널 창에서 깃의 origin에 복사한 주소를 지정
        git push 명령을 사용해 origin의 master브랜치에 커밋을 올린다.
        이 때 다음과 같이 -u 옵션을 붙이면 다음부터 git push 명령만으로
        원격 저장소의 master브랜치에 커밋을 올릴 수 있다.

    3. 깃허브의 원격 저장소를 확인하면 팀장이 올린 overview.txt 문서의 최종 커밋이
       올라와 있다.

[4] 공동 작업자 컴퓨터에 원격 저장소 복제하기
    원격 저장소에서 협업할 때 공동 작업자는 자신의 작업을 진행하기 전에 
    git clone 명령을 사용해서 원격 저장소를 복제(clone)한다.
    $ git clone 원격 저장소 주소

[5] 첫 번째 커밋이 아니라면 풀 먼저하기
    깃허브에서 협업할 때는 여러 사람이 함께 문서를 수정하고 푸시하기 때문에 반드시
    작업하기 전에 원격 저장소의 최신 커밋을 풀한 다음 자신의 커밋을 푸시해야 한다.

    1. vi overview.txt
       git commit -am 'update overview'
       git push

        팀원 모두가 원격 저장소를 복제한 다음 팀장이 overview.txt를 수정해서
        'update overview'라는 메시지와 함께 커밋하고 푸시했다고 가정해 보면,
        즉 팀원1과 팀원2가 저장소를 복제한 뒤 원격 저장소에 새로운 커밋이 올라온 상태
    
    2. vi apple.txt
       git add apple.txt
       git commit -m 'apple'
        
        팀장이 새 커밋을 만들어 원격 저장소에 푸시하는 동안 팀원1이 다른 컴퓨터에서 다른
        커밋을 푸시한다고 가정해보자. 팀원1의 컴퓨터에서 'apple.txt'문서를 작성한 후 커
        밋을 만든다.

    3. git push -u origin master
         
        팀원1이 작성한 커밋을 원격 저장소에 푸시한다.

    4. To https://github.com/narospace/manuals.git
       ! [rejected]        master -> master (fetch first)
       error: failed to push some refs to 'https://github.com/narospace/manuals.git'
         
        그런데 예상하지 못한 오류가 표시된다!!!
        ![rejected]라고 하는 오류 메시지는 원격 저장소에 있는 최신 커밋 정보가 팀원1의
        컴퓨터에 저장되어 있지 않기 때문에 나타난다.
        이런 오류가 생기지 않게 하려면 자신의 커밋을 푸시하기 전에 원격 저장소의 최신 커밋
        을 가저와야 한다.
    
    5. git pull
        원격 저장소에 있는 최신 커밋을 가져오기 위해 git pull 명령 실행
    
    6. 자동으로 vi(편집기)가 실행되면서 커밋 메시지가 표시된다
       원하는 내용을 추가해도 되고 기본 메시지를 사용해도 된다.
    
    7. git push -u origin master
        원격 저장소에서 최신 커밋 정보를 가져왔으므로 이제 팀원1이 만들었던 커밋을 푸시할
        수 있다. 원격 저장소에서 협업할 때는 이렇게 원격 저장소의 최신 커밋 정보를 가져온
        다음 지역 저장소의 커밋을 올려야 한다는 점을 꼭 기억해 둘것!!!

        
 